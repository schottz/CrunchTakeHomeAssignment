name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
          REGISTRY: ${{ secrets.ECR_REGISTRY }}
          REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          cd typeorm-app
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
      
      - name: Run Tests
        env:
          IMAGE_TAG: ${{ github.sha }}
          REGISTRY: ${{ secrets.ECR_REGISTRY }}
          REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          docker run --rm $REGISTRY/$REPOSITORY:$IMAGE_TAG npm -v
          docker run --rm $REGISTRY/$REPOSITORY:$IMAGE_TAG node -v
    
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Push Docker Image
        if: success()
        run: |
            IMAGE_TAG=${{ github.sha }}
            REPOSITORY_URI=${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}
            docker push $REPOSITORY_URI:$IMAGE_TAG
        env:
            AWS_REGION: ${{ secrets.AWS_REGION }}
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy:
    runs-on: ubuntu-latest
    needs: build 

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Get Current Task Definition
        id: task-def
        run: |
            TASK_DEFINITION_ARN=$(aws ecs describe-services --cluster ${{ secrets.ECS_CLUSTER_NAME }} --services ${{ secrets.ECS_SERVICE_NAME }} --query "services[0].taskDefinition" --output text)
            aws ecs describe-task-definition --task-definition $TASK_DEFINITION_ARN > current-task-def.json
    
      - name: Update Task Definition with New Image
        id: update-task-def
        run: |
            NEW_IMAGE="${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}"
            jq --arg IMAGE "$NEW_IMAGE" '.taskDefinition.containerDefinitions[0].image = $IMAGE' current-task-def.json > new-task-def.json
            jq 'del(.taskDefinition.revision, .taskDefinition.status, .taskDefinition.requiresAttributes, .taskDefinition.compatibilities, .taskDefinition.registeredAt, .taskDefinition.registeredBy)' new-task-def.json > clean-task-def.json
    
      - name: Register New Task Definition
        run: |
            aws ecs register-task-definition --cli-input-json file://clean-task-def.json
    
      - name: Update ECS Service
        run: |
            NEW_TASK_DEFINITION_ARN=$(aws ecs describe-task-definition --task-definition ${{ secrets.ECS_SERVICE_NAME }} --query "taskDefinition.taskDefinitionArn" --output text)
            aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service ${{ secrets.ECS_SERVICE_NAME }} --task-definition $NEW_TASK_DEFINITION_ARN --force-new-deployment
        env:
            AWS_REGION: ${{ secrets.AWS_REGION }}
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      - name: Register New Task Definition
        run: |
            FAMILY=$(aws ecs describe-services --cluster ${{ secrets.ECS_CLUSTER_NAME }} --services ${{ secrets.ECS_SERVICE_NAME }} --query "services[0].taskDefinition" --output text | awk -F'/' '{print $2}' | awk -F':' '{print $1}')
            CONTAINER_NAME=$(aws ecs describe-task-definition --task-definition $FAMILY --query "taskDefinition.containerDefinitions[0].name" --output text)
            NEW_IMAGE="${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}"
            sed -e "s|<IMAGE>|$NEW_IMAGE|g" -e "s|<CONTAINER_NAME>|$CONTAINER_NAME|g" task-definition.json > new-task-def.json
            aws ecs register-task-definition --cli-input-json file://new-task-def.json
        env:
            AWS_REGION: ${{ secrets.AWS_REGION }}
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Update ECS Service
        run: |
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service ${{ secrets.ECS_SERVICE_NAME }} --force-new-deployment
